{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7; // >=0.8.7 <0.9.0   ^0.8.7\n//imports\nimport \"./PriceConverter.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n//error codes\nerror FundMe__NotOwner();\n//interfaces, libraries, Contracts\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 public constant MINIMUM_USD = 50 * 1e8;\n\n    address[] private s_funders;\n    mapping (address => uint256) private s_addressToAmountFunded;\n\n    address private immutable i_owner;\n    AggregatorV3Interface private immutable s_priceFeed;\n\n    constructor(address _priceFeed) {\n        s_priceFeed = AggregatorV3Interface(_priceFeed);\n        i_owner = msg.sender;\n    }\n\n    function getOwner() public view returns(address) {\n        return i_owner;\n    }\n\n    function getFunder(uint256 index) public view returns(address) {\n        return s_funders[index];\n    }\n\n    function getAmountFunded(address adr) public view returns(uint256) {\n        return s_addressToAmountFunded[adr];\n    }\n\n    function getPriceFeed() public view returns(AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n\n    function fund() public payable {\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \"You have to send at least 50 USD\");\n\n        s_funders.push(msg.sender);\n        uint256 prevValue = s_addressToAmountFunded[msg.sender];\n        s_addressToAmountFunded[msg.sender] = prevValue + msg.value;\n    }\n\n    function getList() public view returns (uint256) {\n        return s_addressToAmountFunded[msg.sender];\n    }\n\n    function withdraw() public onlyOwner {\n        for(uint256 funderI = 0; funderI < s_funders.length; funderI++) {\n            address funder = s_funders[funderI];\n            s_addressToAmountFunded[funder] = 0;\n        }\n\n        s_funders = new address[](0);\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(success, \"Call failed\");\n    }\n\n    function cheaperWithdraw() public onlyOwner {\n        address[] memory funders = s_funders;\n        //mappings can't be in memory\n        for(uint256 funderI = 0; funderI < funders.length; funderI++) {\n            address funder = funders[funderI];\n            s_addressToAmountFunded[funder] = 0;\n        }\n\n        s_funders = new address[](0);\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(success, \"Call failed\");\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    modifier onlyOwner() {\n        if(msg.sender != i_owner) revert FundMe__NotOwner();\n        _;\n    }\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7; // >=0.8.7 <0.9.0   ^0.8.7\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getEthPrice(AggregatorV3Interface priceFeed) internal view returns (int256) {\r\n        (\r\n        /* uint80 roundID */,\r\n        int256 answer,\r\n        /*uint startedAt*/,\r\n        /*uint timeStamp*/,\r\n        /*uint80 answeredInRound*/\r\n        ) = priceFeed.latestRoundData();\r\n\r\n        return answer;\r\n    }\r\n\r\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\r\n        uint256 ethPrice = uint256(getEthPrice(priceFeed));\r\n        //1e18 = 1_000000000000000000\r\n        uint256 ethInUsd = (ethAmount * ethPrice) / 1e8;\r\n\r\n        return ethInUsd;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}